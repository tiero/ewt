// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package esplora

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EsploraClient is the client API for Esplora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsploraClient interface {
	Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxReply, error)
}

type esploraClient struct {
	cc grpc.ClientConnInterface
}

func NewEsploraClient(cc grpc.ClientConnInterface) EsploraClient {
	return &esploraClient{cc}
}

func (c *esploraClient) Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxReply, error) {
	out := new(TxReply)
	err := c.cc.Invoke(ctx, "/Esplora/tx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsploraServer is the server API for Esplora service.
// All implementations must embed UnimplementedEsploraServer
// for forward compatibility
type EsploraServer interface {
	Tx(context.Context, *TxRequest) (*TxReply, error)
	mustEmbedUnimplementedEsploraServer()
}

// UnimplementedEsploraServer must be embedded to have forward compatible implementations.
type UnimplementedEsploraServer struct {
}

func (UnimplementedEsploraServer) Tx(context.Context, *TxRequest) (*TxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (UnimplementedEsploraServer) mustEmbedUnimplementedEsploraServer() {}

// UnsafeEsploraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsploraServer will
// result in compilation errors.
type UnsafeEsploraServer interface {
	mustEmbedUnimplementedEsploraServer()
}

func RegisterEsploraServer(s grpc.ServiceRegistrar, srv EsploraServer) {
	s.RegisterService(&Esplora_ServiceDesc, srv)
}

func _Esplora_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsploraServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Esplora/tx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsploraServer).Tx(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Esplora_ServiceDesc is the grpc.ServiceDesc for Esplora service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Esplora_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Esplora",
	HandlerType: (*EsploraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tx",
			Handler:    _Esplora_Tx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "esplora.proto",
}
